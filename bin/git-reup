#!/usr/bin/env python
#
# Usage: git-up
#        git-reup
#
# Like git-pull but show a short and sexy log of changes
# immediately after merging (git-up) or rebasing (git-reup).
#
# Inspired by Kyle Neath's `git up' alias:
# http://gist.github.com/249223
#
# Stolen from Ryan Tomayko
# http://github.com/rtomayko/dotfiles/blob/rtomayko/bin/git-up
# and then Zach Holman
# https://github.com/holman/dotfiles/blob/master/bin/git-up
# and then Barijaona Ramaholimihaso
# https://gist.github.com/barijaona/3194807
# and then rewritten into Python by Dominik Liebler
# https://github.com/domnikl/dotfiles/blob/main/bin/git-reup

import os
import subprocess
import sys

pull_args = sys.argv[1:]

rebase = os.path.basename(sys.argv[0]) == 'git-reup'
stashed = False

old_head = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode().strip()

if rebase:
    pull_args.append('--rebase')

    msg = subprocess.check_output(['git', 'stash', 'save', f'Auto-stash by {os.path.basename(sys.argv[0])} script']).decode().strip()
    stashed = msg != 'No local changes to save'

subprocess.call(['git', 'pull'] + pull_args)

updated = (old_head != subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode().strip())

if stashed and rebase:
    subprocess.call(['git', 'stash', 'pop', '--quiet'])

if updated:
    if rebase:
        print("Diffstat:")
        p1 = subprocess.Popen(['git', '--no-pager', 'diff', '--color', '--stat', f'{old_head}..'], stdout=subprocess.PIPE)
        p2 = subprocess.Popen(["sed", "s/^/  /"], stdin=p1.stdout, stdout=subprocess.PIPE)
        p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
        output, error = p2.communicate()
        print(output.decode())

    print("Log:")
    p1 = subprocess.Popen(['git', 'log', '--color', '--pretty=oneline', '--abbrev-commit', f'{old_head}..'], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(["sed", "s/^/  /"], stdin=p1.stdout, stdout=subprocess.PIPE)
    p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
    output, error = p2.communicate()
    print(output.decode())

# delete branches merged and no longer needed
merged_branches = subprocess.check_output(['git', 'branch', '--merged']).decode().splitlines()
for branch in merged_branches:
    chomped = branch.strip()

    if not chomped.startswith('*') and not chomped.endswith(('master', 'main')):
        subprocess.call(['git', 'branch', '-d', chomped])
